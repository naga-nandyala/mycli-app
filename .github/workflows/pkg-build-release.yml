name: (pkg) - build-release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: true
        default: '1.0.0'
      create_release:
        description: 'Create GitHub release?'
        required: true
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

permissions:
  contents: write

jobs:
  build-pkg:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [arm64, x86_64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install build dependencies
        pip install setuptools wheel

    - name: Create venv bundle for ${{ matrix.arch }}
      run: |
        echo "🏗️  Creating venv bundle for ${{ matrix.arch }}"
        
        # Use version from manual input
        VERSION="${{ github.event.inputs.version }}"
        echo "Building version: $VERSION"
        
        # Create venv bundle (this should match your existing venv creation process)
        python -m venv "build/mycli-${{ matrix.arch }}"
        source "build/mycli-${{ matrix.arch }}/bin/activate"
        
        # Install the package with ALL Azure dependencies
        pip install -e ".[azure,broker]"
        
        # Verify Azure dependencies are installed
        echo "🔍 Verifying Azure dependencies..."
        pip list | grep -E "(azure|msal)" || {
          echo "❌ Azure dependencies not found!"
          exit 1
        }
        
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build .pkg installer
      run: |
        chmod +x macos_packaging/pkg_builder/build_pkg.sh
        macos_packaging/pkg_builder/build_pkg.sh "$VERSION" "${{ matrix.arch }}"

    - name: Upload .pkg artifact
      uses: actions/upload-artifact@v4
      with:
        name: mycli-app-${{ env.VERSION }}-${{ matrix.arch }}.pkg
        path: mycli-app-${{ env.VERSION }}-${{ matrix.arch }}.pkg
        if-no-files-found: error

  create-release:
    needs: build-pkg
    runs-on: ubuntu-latest
    if: github.event.inputs.create_release == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Prepare release files
      run: |
        mkdir -p release/
        
        # Move .pkg files to release directory
        find artifacts/ -name "*.pkg" -exec cp {} release/ \;
        
        # List what we're releasing
        ls -la release/

    - name: Set version from input
      run: |
        VERSION="${{ github.event.inputs.version }}"
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.VERSION }}
        name: MyCLI App v${{ env.VERSION }}
        draft: false
        prerelease: false
        files: release/*
        body: |
          # MyCLI App v${{ env.VERSION }}
          
          ## Installation Options
          
          ### Option 1: Direct .pkg Installation
          Download the appropriate .pkg file for your architecture:
          - `mycli-app-${{ env.VERSION }}-arm64.pkg` for Apple Silicon Macs
          - `mycli-app-${{ env.VERSION }}-x86_64.pkg` for Intel Macs
          
          Then install with:
          ```bash
          sudo installer -pkg mycli-app-${{ env.VERSION }}-ARCH.pkg -target /
          ```
          
          ### Option 2: Homebrew Cask (coming soon)
          ```bash
          brew tap nagarnandyala/homebrew-nagarnandyala
          brew install --cask mycli-app-pkg
          ```
          
          ## Usage
          After installation, the `mycli` command will be available system-wide:
          ```bash
          mycli --help
          mycli --version
          mycli login
          mycli status
          ```
          
          ## Uninstall
          To uninstall:
          ```bash
          sudo mycli-uninstall.sh
          ```
          
          ## What's New
          - Native macOS .pkg installer support
          - System-wide installation in `/usr/local/bin`
          - Improved installation and uninstallation experience
          - Better integration with macOS security features
          
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}