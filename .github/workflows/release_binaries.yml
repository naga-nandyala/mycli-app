# GitHub Actions workflow to build and release macOS binaries for mycli
# Auto-created from macos_homebrew/workflow template.

name: build-release-binaries (Manual)

# Ensure GITHUB_TOKEN can create releases
permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version string (e.g. 1.2.3)'
        required: true
        default: '0.1.0'
      create_release:
        description: 'Create GitHub Release (true/false)'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  build-macos:
    name: macOS ${{ matrix.arch }} build
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: arm64
            runner: macos-14
          - arch: x86_64
            runner: macos-13
    env:
      PYTHON_VERSION: '3.12'
      MYCLI_EXTRAS: 'azure,broker'
      MYCLI_WITH_AZURE: '1'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build deps and package
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller build
          echo "=== Installing package with extras ==="
          echo "Installing with extras: ${{ env.MYCLI_EXTRAS }}"
          # Install the package with extras so PyInstaller can find all dependencies
          python -m pip install -e ".[${{ env.MYCLI_EXTRAS }}]"
          echo "=== Installation complete ==="

      - name: Verify package installation
        run: |
          echo "=== All installed packages ==="
          python -m pip list
          echo ""
          echo "=== Azure/MSAL packages ==="
          python -m pip list | grep -E "(azure|msal|cryptography)" || echo "No Azure/MSAL packages found"
          echo ""
          echo "=== Testing package import ==="
          python -c "import mycli_app.cli; print('Package import successful')"
          if [ "${{ env.MYCLI_WITH_AZURE }}" = "1" ]; then
            echo "=== Testing Azure imports ==="
            python -c "import azure.identity; print('✓ azure.identity imported successfully')" || echo "✗ azure.identity import failed"
            python -c "import msal; print('✓ msal imported successfully')" || echo "✗ msal import failed"
            python -c "import pymsalruntime; print('✓ pymsalruntime imported successfully')" || echo "✗ pymsalruntime import failed"
          fi

      - name: Build binary (spec file)
        run: |
          # Set MYCLI_WITH_AZURE=1 in job/env or before this line to include optional azure packages.
          pyinstaller macos_homebrew/pyinstaller/mycli.spec --clean
          echo "PyInstaller build finished. Contents of dist/:"
          ls -R dist

      - name: Inspect PyInstaller contents  
        run: |
          echo "=== PyInstaller warnings ==="
          if ls warn-*.txt 2>/dev/null; then cat warn-*.txt; else echo "No warning files found"; fi
          echo ""
          echo "=== Binary contents check ==="
          echo "Checking dist directory structure:"
          ls -la dist/
          if [ -d dist/mycli ]; then
            echo "Found dist/mycli directory (COLLECT build)"
            ls -la dist/mycli/
            if [ -f dist/mycli/base_library.zip ]; then
              echo "Checking base_library.zip for all Azure/MSAL modules:"
              echo "--- Azure modules ---"
              zipinfo dist/mycli/base_library.zip | grep -i azure | head -15 || echo "No azure entries found"
              echo "--- MSAL modules ---" 
              zipinfo dist/mycli/base_library.zip | grep -i msal | head -10 || echo "No msal entries found"
              echo "--- PyMSALRuntime modules ---"
              zipinfo dist/mycli/base_library.zip | grep -i pymsalruntime || echo "No pymsalruntime entries found"
              echo "--- Cryptography modules ---"
              zipinfo dist/mycli/base_library.zip | grep -i cryptography | head -5 || echo "No cryptography entries found"
              echo "--- Total module count ---"
              zipinfo dist/mycli/base_library.zip | grep "\.pyc$" | wc -l
            else
              echo "base_library.zip not found in dist/mycli/"
            fi
          elif [ -f dist/mycli ]; then
            echo "Found dist/mycli file (onefile build)"
            echo "File size: $(ls -lh dist/mycli | awk '{print $5}')"
          else
            echo "Neither dist/mycli directory nor file found"
            echo "Available files in dist/:"
            ls -la dist/ || echo "dist/ directory not found"
          fi

      - name: Package
        run: |
          INPUT_VERSION='${{ github.event.inputs.version }}'
          CODE_VERSION=$(grep '__version__' src/mycli_app/__init__.py | cut -d '"' -f2)
          if [ "$INPUT_VERSION" != "$CODE_VERSION" ]; then
            echo "Warning: input version ($INPUT_VERSION) != code version ($CODE_VERSION). Using input." >&2
            VERSION="$INPUT_VERSION"
          else
            VERSION="$CODE_VERSION"
          fi
          ARCH=${{ matrix.arch }}
          # Binary path differs when using spec (folder build). Adjust if needed.
          if [ -f dist/mycli ]; then
            cp dist/mycli mycli
          elif [ -f dist/mycli/mycli ]; then
            cp dist/mycli/mycli mycli
          else
            echo "Could not locate built binary" >&2
            exit 1
          fi
          chmod +x mycli
          TAR_NAME="mycli-${VERSION}-macos-${ARCH}.tar.gz"
          tar -czf "$TAR_NAME" mycli
          shasum -a 256 "$TAR_NAME" > "$TAR_NAME.sha256"
          echo "TAR_NAME=$TAR_NAME" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mycli-macos-${{ matrix.arch }}
          path: |
            *.tar.gz
            *.tar.gz.sha256

  release:
    needs: build-macos
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Extract version
        id: set_version
        run: |
          # Find first version from tarball names
          V=$(find artifacts -name 'mycli-*-macos-*.tar.gz' | head -n1 | sed -E 's/.*mycli-([0-9]+\.[0-9]+\.[0-9]+)-macos-.*/\1/')
          if [ -z "$V" ]; then echo "Could not determine version" >&2; exit 1; fi
          echo "Detected version: $V"
          echo "version=$V" >> $GITHUB_OUTPUT

      - name: Display artifacts
        run: ls -R artifacts

      - name: Prepare release assets
        run: |
          mkdir upload
          find artifacts -name '*.tar.gz' -exec cp {} upload/ \;
          find artifacts -name '*.sha256' -exec cp {} upload/ \;

      - name: Create Release
        if: ${{ github.event.inputs.create_release == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          files: upload/*
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ steps.set_version.outputs.version }}
          name: mycli v${{ steps.set_version.outputs.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
