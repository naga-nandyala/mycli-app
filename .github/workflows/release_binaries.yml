# GitHub Actions workflow to build and release macOS binaries for mycli
# Auto-created from macos_homebrew/workflow template.

name: build-release-binaries (Manual)

# Ensure GITHUB_TOKEN can create releases
permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version string (e.g. 1.2.3)'
        required: true
        default: '0.1.0'
      create_release:
        description: 'Create GitHub Release (true/false)'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  build-macos:
    name: macOS ${{ matrix.arch }} build
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: arm64
            runner: macos-14
          - arch: x86_64
            runner: macos-13
    env:
      PYTHON_VERSION: '3.12'
      MYCLI_EXTRAS: 'azure,broker'
      MYCLI_WITH_AZURE: '1'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build deps and package
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller build
          echo "=== Installing package with extras ==="
          echo "Installing with extras: ${{ env.MYCLI_EXTRAS }}"
          # Install the package with extras so PyInstaller can find all dependencies
          python -m pip install -e ".[${{ env.MYCLI_EXTRAS }}]"
          echo "=== Installation complete ==="

      - name: Verify package installation
        run: |
          echo "=== All installed packages ==="
          python -m pip list
          echo ""
          echo "=== Azure/MSAL packages ==="
          python -m pip list | grep -E "(azure|msal|cryptography)" || echo "No Azure/MSAL packages found"
          echo ""
          echo "=== Testing package import ==="
          python -c "import mycli_app.cli; print('Package import successful')"
          if [ "${{ env.MYCLI_WITH_AZURE }}" = "1" ]; then
            echo "=== Testing Azure imports ==="
            python -c "import azure.identity; print('✓ azure.identity imported successfully')" || echo "✗ azure.identity import failed"
            python -c "import msal; print('✓ msal imported successfully')" || echo "✗ msal import failed"
            python -c "import pymsalruntime; print('✓ pymsalruntime imported successfully')" || echo "✗ pymsalruntime import failed"
          fi

      - name: Build binary (spec file)
        run: |
          echo "=== PyInstaller Build with Debug ==="
          echo "Environment variables:"
          echo "  MYCLI_WITH_AZURE=${{ env.MYCLI_WITH_AZURE }}"
          echo "  MYCLI_EXTRAS=${{ env.MYCLI_EXTRAS }}"
          echo ""
          echo "=== Pre-build import test ==="
          python -c "
          print('Testing critical imports before PyInstaller build...')
          try:
              import azure.identity
              print('✓ azure.identity available')
          except ImportError as e:
              print(f'❌ azure.identity not available: {e}')
          
          try:
              import msal
              print('✓ msal available')  
          except ImportError as e:
              print(f'❌ msal not available: {e}')
          
          try:
              import cryptography
              print('✓ cryptography available')
          except ImportError as e:
              print(f'❌ cryptography not available: {e}')
          "
          echo ""
          echo "=== Starting PyInstaller build ==="
          # Set MYCLI_WITH_AZURE=1 in job/env or before this line to include optional azure packages.
          pyinstaller macos_homebrew/pyinstaller/mycli.spec --clean --log-level=INFO
          echo ""
          echo "=== Build completed ==="
          echo "PyInstaller build finished. Contents of dist/:"
          ls -R dist

      - name: Verify Azure/Broker dependencies in binary
        run: |
          echo "=== Dependency Verification ==="
          echo "Checking if all pyproject.toml [azure,broker] dependencies are bundled..."
          
          # Define expected dependencies from pyproject.toml
          EXPECTED_MODULES=(
            "azure.identity"
            "azure.core"
            "azure.mgmt.core"
            "msal"
            "msal.application"
            "msal.oauth2cli"
            "msal.token_cache"
            "pymsalruntime"
            "cryptography"
            "requests"
            "certifi"
            "urllib3"
            "jwt"  # from PyJWT
          )
          
          if [ -f dist/mycli/_internal/base_library.zip ]; then
            LIBRARY_ZIP="dist/mycli/_internal/base_library.zip"
          elif [ -f dist/mycli/base_library.zip ]; then
            LIBRARY_ZIP="dist/mycli/base_library.zip"
          else
            echo "❌ Could not find base_library.zip"
            exit 1
          fi
          
          echo "Checking dependencies in: $LIBRARY_ZIP"
          echo ""
          
          # Get complete listing of all files in the zip (not just .pyc)
          echo "=== Bundle Analysis ==="
          ALL_FILES=$(zipinfo -1 "$LIBRARY_ZIP" | sort)
          PYTHON_FILES=$(echo "$ALL_FILES" | grep -E "\.(py|pyc)$")
          
          echo "Total files in bundle: $(echo "$ALL_FILES" | wc -l)"
          echo "Python files in bundle: $(echo "$PYTHON_FILES" | wc -l)"
          echo ""
          
          # Show sample of what's actually in the bundle
          echo "=== Sample Bundle Contents ==="
          echo "First 20 files:"
          echo "$ALL_FILES" | head -20
          echo ""
          echo "All Azure-related files:"
          echo "$ALL_FILES" | grep -i azure || echo "No files containing 'azure' found"
          echo ""
          echo "All MSAL-related files:"
          echo "$ALL_FILES" | grep -i msal || echo "No files containing 'msal' found"
          echo ""
          echo "All cryptography-related files:"
          echo "$ALL_FILES" | grep -i crypt || echo "No files containing 'crypt' found"
          echo ""
          echo "All requests-related files:"
          echo "$ALL_FILES" | grep -i request || echo "No files containing 'request' found"
          echo ""
          
          # More flexible search patterns
          echo "=== Dependency Check (Flexible Search) ==="
          MISSING_DEPS=()
          FOUND_DEPS=()
          
          for dep in "${EXPECTED_MODULES[@]}"; do
            # Try multiple search patterns
            FOUND=false
            
            # Pattern 1: Direct module name
            if echo "$ALL_FILES" | grep -q "$dep"; then
              FOUND=true
            # Pattern 2: Convert dots to slashes
            elif echo "$ALL_FILES" | grep -q "$(echo "$dep" | tr '.' '/')"; then
              FOUND=true
            # Pattern 3: Case insensitive search
            elif echo "$ALL_FILES" | grep -iq "$dep"; then
              FOUND=true
            # Pattern 4: Search for any part of the module name
            elif echo "$ALL_FILES" | grep -iq "$(echo "$dep" | cut -d. -f1)"; then
              FOUND=true
            fi
            
            if [ "$FOUND" = true ]; then
              echo "✓ $dep - Found"
              FOUND_DEPS+=("$dep")
              # Show where it was found
              echo "$ALL_FILES" | grep -i "$dep" | head -3 | sed 's/^/    /'
            else
              echo "❌ $dep - Missing"
              MISSING_DEPS+=("$dep")
            fi
          done
          
          echo ""
          echo "=== Summary ==="
          echo "Found dependencies: ${#FOUND_DEPS[@]} / ${#EXPECTED_MODULES[@]}"
          echo "Missing dependencies: ${#MISSING_DEPS[@]}"
          
          if [ ${#MISSING_DEPS[@]} -gt 0 ]; then
            echo ""
            echo "❌ Missing dependencies:"
            for dep in "${MISSING_DEPS[@]}"; do
              echo "  - $dep"
            done
            
            echo ""
            echo "⚠️  This might indicate:"
            echo "  1. PyInstaller is not detecting these modules (need hidden imports)"
            echo "  2. Modules are installed but not imported by the application"
            echo "  3. Different package names in the bundle vs. expectations"
            echo ""
            echo "Consider this a warning rather than a failure for now."
            # Don't exit with error - treat as warning for debugging
          else
            echo "✅ All critical Azure/Broker dependencies are bundled!"
          fi

      - name: Inspect PyInstaller contents  
        run: |
          echo "=== PyInstaller warnings ==="
          if ls warn-*.txt 2>/dev/null; then cat warn-*.txt; else echo "No warning files found"; fi
          echo ""
          echo "=== Binary contents check ==="
          echo "Checking dist directory structure:"
          ls -la dist/
          if [ -d dist/mycli ]; then
            echo "Found dist/mycli directory (COLLECT build)"
            ls -la dist/mycli/
            
            # Check for base_library.zip in the newer location (_internal)
            if [ -f dist/mycli/_internal/base_library.zip ]; then
              echo "Checking _internal/base_library.zip for all Azure/MSAL modules:"
              echo "--- Azure modules ---"
              zipinfo dist/mycli/_internal/base_library.zip | grep -i azure | head -15 || echo "No azure entries found"
              echo "--- MSAL modules ---" 
              zipinfo dist/mycli/_internal/base_library.zip | grep -i msal | head -10 || echo "No msal entries found"
              echo "--- PyMSALRuntime modules ---"
              zipinfo dist/mycli/_internal/base_library.zip | grep -i pymsalruntime || echo "No pymsalruntime entries found"
              echo "--- Cryptography modules ---"
              zipinfo dist/mycli/_internal/base_library.zip | grep -i cryptography | head -5 || echo "No cryptography entries found"
              echo "--- Total module count ---"
              zipinfo dist/mycli/_internal/base_library.zip | grep "\.pyc$" | wc -l
            elif [ -f dist/mycli/base_library.zip ]; then
              echo "Checking base_library.zip for all Azure/MSAL modules (legacy location):"
              echo "--- Azure modules ---"
              zipinfo dist/mycli/base_library.zip | grep -i azure | head -15 || echo "No azure entries found"
              echo "--- MSAL modules ---" 
              zipinfo dist/mycli/base_library.zip | grep -i msal | head -10 || echo "No msal entries found"
              echo "--- PyMSALRuntime modules ---"
              zipinfo dist/mycli/base_library.zip | grep -i pymsalruntime || echo "No pymsalruntime entries found"
              echo "--- Cryptography modules ---"
              zipinfo dist/mycli/base_library.zip | grep -i cryptography | head -5 || echo "No cryptography entries found"
              echo "--- Total module count ---"
              zipinfo dist/mycli/base_library.zip | grep "\.pyc$" | wc -l
            else
              echo "base_library.zip not found in expected locations"
              echo "Contents of _internal directory:"
              ls -la dist/mycli/_internal/ || echo "_internal directory not found"
            fi
            
            # Show _internal directory contents for debugging
            echo ""
            echo "=== _internal directory analysis ==="
            if [ -d dist/mycli/_internal ]; then
              echo "Contents of _internal:"
              ls -la dist/mycli/_internal/
              echo "Python library files:"
              ls -la dist/mycli/_internal/ | grep -E "\.(so|dylib|pyd)$" || echo "No shared library files found"
            fi
            
          elif [ -f dist/mycli ]; then
            echo "Found dist/mycli file (onefile build)"
            echo "File size: $(ls -lh dist/mycli | awk '{print $5}')"
          else
            echo "Neither dist/mycli directory nor file found"
            echo "Available files in dist/:"
            ls -la dist/ || echo "dist/ directory not found"
          fi

      - name: Test binary functionality
        run: |
          echo "=== Testing Built Binary ==="
          # Find the binary location
          if [ -f dist/mycli ]; then
            BINARY_PATH="dist/mycli"
            echo "Found onefile binary: $BINARY_PATH"
          elif [ -f dist/mycli/mycli ]; then
            BINARY_PATH="dist/mycli/mycli"
            echo "Found COLLECT binary: $BINARY_PATH"
          else
            echo "❌ Could not locate built binary" >&2
            ls -la dist/ || echo "dist/ directory not found"
            exit 1
          fi
          
          # Make sure binary is executable
          chmod +x "$BINARY_PATH"
          
          # Get binary info
          echo "=== Binary Information ==="
          ls -lh "$BINARY_PATH"
          file "$BINARY_PATH" || echo "file command not available"
          
          # Test basic functionality
          echo "=== Basic Functionality Tests ==="
          echo "Testing --version:"
          "$BINARY_PATH" --version || { echo "❌ Version command failed"; exit 1; }
          
          echo "Testing --help:"
          "$BINARY_PATH" --help || { echo "❌ Help command failed"; exit 1; }
          
          echo "Testing status command:"
          "$BINARY_PATH" status || { echo "❌ Status command failed"; exit 1; }
          
          # Test Azure functionality if enabled
          if [ "${{ env.MYCLI_WITH_AZURE }}" = "1" ]; then
            echo "=== Azure Functionality Tests ==="
            echo "Testing broker command:"
            "$BINARY_PATH" broker || { echo "❌ Broker command failed"; exit 1; }
            
            echo "Testing account command:"
            "$BINARY_PATH" account --help || { echo "❌ Account command failed"; exit 1; }
            
            echo "Testing login command:"
            "$BINARY_PATH" login --help || { echo "❌ Login command failed"; exit 1; }
          fi
          
          echo "✅ All binary tests passed!"

      - name: Package
        run: |
          INPUT_VERSION='${{ github.event.inputs.version }}'
          CODE_VERSION=$(grep '__version__' src/mycli_app/__init__.py | cut -d '"' -f2)
          if [ "$INPUT_VERSION" != "$CODE_VERSION" ]; then
            echo "Warning: input version ($INPUT_VERSION) != code version ($CODE_VERSION). Using input." >&2
            VERSION="$INPUT_VERSION"
          else
            VERSION="$CODE_VERSION"
          fi
          ARCH=${{ matrix.arch }}
          
          echo "=== Packaging Binary ==="
          TAR_NAME="mycli-${VERSION}-macos-${ARCH}.tar.gz"
          
          # Handle both onefile and onedir (COLLECT) builds
          if [ -f dist/mycli ]; then
            echo "Found onefile binary: dist/mycli"
            cp dist/mycli mycli
            chmod +x mycli
            tar -czf "$TAR_NAME" mycli
          elif [ -d dist/mycli ]; then
            echo "Found COLLECT directory: dist/mycli"
            echo "Contents of dist/mycli:"
            ls -la dist/mycli/
            # For COLLECT builds, package the entire directory but rename the top level
            cd dist
            tar -czf "../$TAR_NAME" mycli/
            cd ..
          else
            echo "Could not locate built binary" >&2
            ls -la dist/ || echo "dist/ directory not found"
            exit 1
          fi
          
          shasum -a 256 "$TAR_NAME" > "$TAR_NAME.sha256"
          echo "TAR_NAME=$TAR_NAME" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
          echo "Created package: $TAR_NAME"
          echo "Package size: $(ls -lh $TAR_NAME | awk '{print $5}')"

      - name: Test packaged binary
        run: |
          echo "=== Testing Packaged Binary ==="
          TAR_NAME="${{ env.TAR_NAME }}"
          
          # Extract and test the packaged binary
          echo "Extracting $TAR_NAME..."
          tar -xzf "$TAR_NAME"
          
          echo "Testing extracted binary..."
          
          # Handle both onefile and COLLECT directory structures
          if [ -f mycli ]; then
            echo "Found onefile binary: mycli"
            chmod +x mycli
            BINARY_PATH="./mycli"
          elif [ -d mycli ]; then
            echo "Found COLLECT directory: mycli"
            echo "Contents of mycli directory:"
            ls -la mycli/
            chmod +x mycli/mycli
            BINARY_PATH="./mycli/mycli"
          else
            echo "❌ Could not locate extracted binary"
            ls -la .
            exit 1
          fi
          
          echo "=== Final Package Tests ==="
          echo "Using binary: $BINARY_PATH"
          
          echo "Version:"
          "$BINARY_PATH" --version
          
          echo "Status:"
          "$BINARY_PATH" status
          
          if [ "${{ env.MYCLI_WITH_AZURE }}" = "1" ]; then
            echo "Broker info:"
            "$BINARY_PATH" broker
          fi
          
          echo "✅ Packaged binary test successful!"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mycli-macos-${{ matrix.arch }}
          path: |
            *.tar.gz
            *.tar.gz.sha256

  release:
    needs: build-macos
    runs-on: macos-latest  # Changed from ubuntu-latest to support macOS binary testing
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Extract version
        id: set_version
        run: |
          # Find first version from tarball names
          V=$(find artifacts -name 'mycli-*-macos-*.tar.gz' | head -n1 | sed -E 's/.*mycli-([0-9]+\.[0-9]+\.[0-9]+)-macos-.*/\1/')
          if [ -z "$V" ]; then echo "Could not determine version" >&2; exit 1; fi
          echo "Detected version: $V"
          echo "version=$V" >> $GITHUB_OUTPUT

      - name: Display artifacts
        run: ls -R artifacts

      - name: Prepare release assets
        run: |
          mkdir upload
          find artifacts -name '*.tar.gz' -exec cp {} upload/ \;
          find artifacts -name '*.sha256' -exec cp {} upload/ \;

      - name: Final validation test
        run: |
          echo "=== Final Release Validation on macOS ==="
          # Test one of the built binaries before release
          FIRST_TARBALL=$(find upload -name 'mycli-*.tar.gz' | head -1)
          if [ -z "$FIRST_TARBALL" ]; then
            echo "❌ No tarball found for validation"
            exit 1
          fi
          
          echo "Testing: $FIRST_TARBALL"
          echo "Runner architecture: $(uname -m)"
          echo "Runner OS: $(uname -s)"
          
          # Extract and test
          tar -xzf "$FIRST_TARBALL"
          
          # Handle both onefile and COLLECT directory structures
          if [ -f mycli ]; then
            echo "Found onefile binary: mycli"
            chmod +x mycli
            BINARY_PATH="./mycli"
            echo "✓ Onefile structure validated"
          elif [ -d mycli ]; then
            echo "Found COLLECT directory: mycli"
            echo "Contents of mycli directory:"
            ls -la mycli/
            chmod +x mycli/mycli
            BINARY_PATH="./mycli/mycli"
            
            # Validate COLLECT structure
            if [ -f mycli/mycli ]; then
              echo "✓ Main executable found"
            else
              echo "❌ Main executable missing"
              exit 1
            fi
            
            if [ -d mycli/_internal ]; then
              echo "✓ Dependencies directory found"
              echo "Dependencies count: $(ls mycli/_internal | wc -l)"
            else
              echo "⚠️  No _internal directory (might be onefile in directory)"
            fi
            
            echo "✓ COLLECT structure validated"
          else
            echo "❌ Could not locate extracted binary"
            ls -la .
            exit 1
          fi
          
          echo "=== Release Validation Tests ==="
          echo "Binary info:"
          ls -lh "$BINARY_PATH"
          
          # File type validation
          echo "Binary file type:"
          file "$BINARY_PATH"
          
          # Size validation
          BINARY_SIZE=$(stat -f%z "$BINARY_PATH")
          echo "Binary size: $BINARY_SIZE bytes ($(($BINARY_SIZE / 1024 / 1024))MB)"
          
          if [ "$BINARY_SIZE" -gt 5000000 ]; then
            echo "✓ Binary size looks reasonable (>5MB, likely includes Azure deps)"
          else
            echo "⚠️  Binary size seems small, might be missing dependencies"
          fi
          
          # FUNCTIONAL TESTING - Now we can actually run the binary!
          echo "=== Functional Testing ==="
          
          echo "Testing --version:"
          "$BINARY_PATH" --version || { echo "❌ Version command failed"; exit 1; }
          
          echo "Testing --help:"
          "$BINARY_PATH" --help > /dev/null || { echo "❌ Help command failed"; exit 1; }
          echo "✓ Help command works"
          
          echo "Testing status command:"
          STATUS_OUTPUT=$("$BINARY_PATH" status)
          echo "$STATUS_OUTPUT"
          if echo "$STATUS_OUTPUT" | grep -q "Azure SDK: Available"; then
            echo "✓ Azure SDK is available in binary"
          else
            echo "⚠️  Azure SDK might not be available"
          fi
          
          if echo "$STATUS_OUTPUT" | grep -q "Broker Support: Available"; then
            echo "✓ Broker support is available in binary"
          else
            echo "⚠️  Broker support might not be available"
          fi
          
          echo "Testing broker command:"
          BROKER_OUTPUT=$("$BINARY_PATH" broker)
          if echo "$BROKER_OUTPUT" | grep -q "Broker Support: Available"; then
            echo "✓ Broker functionality works"
          else
            echo "⚠️  Broker functionality issue"
          fi
          
          echo "Testing account command:"
          "$BINARY_PATH" account --help > /dev/null || { echo "❌ Account command failed"; exit 1; }
          echo "✓ Account command works"
          
          echo "Testing login command:"
          "$BINARY_PATH" login --help > /dev/null || { echo "❌ Login command failed"; exit 1; }
          echo "✓ Login command works"
          
          # Validate tarball integrity
          echo "=== Package Validation ==="
          if tar -tzf "$FIRST_TARBALL" > /dev/null; then
            echo "✓ Tarball integrity verified"
          else
            echo "❌ Tarball integrity check failed"
            exit 1
          fi
          
          # Check SHA256 file
          FIRST_SHA=$(find upload -name 'mycli-*.sha256' | head -1)
          if [ -f "$FIRST_SHA" ]; then
            echo "✓ SHA256 checksum file found"
            echo "SHA256: $(cat "$FIRST_SHA")"
            
            # Verify checksum - need to be in the right directory
            TARBALL_NAME=$(basename "$FIRST_TARBALL")
            SHA_NAME=$(basename "$FIRST_SHA")
            
            echo "Verifying checksum for: $TARBALL_NAME"
            cd upload
            if shasum -a 256 -c "$SHA_NAME"; then
              echo "✓ SHA256 checksum verified"
            else
              echo "❌ SHA256 checksum verification failed"
              echo "Available files in upload/:"
              ls -la
              echo "Contents of $SHA_NAME:"
              cat "$SHA_NAME"
              cd ..
              exit 1
            fi
            cd ..
          else
            echo "❌ SHA256 file missing"
            exit 1
          fi
          
          echo "✅ Full release validation passed on macOS!"
          echo "Binary is functional with all Azure/MSAL capabilities"
          
          # Clean up test files
          rm -rf mycli

      - name: Create Release
        if: ${{ github.event.inputs.create_release == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          files: upload/*
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ steps.set_version.outputs.version }}
          name: mycli v${{ steps.set_version.outputs.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
