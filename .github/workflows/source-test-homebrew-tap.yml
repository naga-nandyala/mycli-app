name: src style - Test Homebrew Tap

# This workflow tests the enhanced source-based Homebrew formula (mycli-app-src)
# It verifies the AWS CLI-style approach for handling binary wheels (pymsalruntime)
# while building other dependencies from source

on:
  # Primary trigger: Manual testing
  workflow_dispatch:
    inputs:
      test_version:
        description: 'Version to test (leave empty for latest)'
        required: false
        type: string
  
  # Optional: Test on schedule (weekly, commented out by default)
  # schedule:
  #   - cron: '0 14 * * 1'  # Every Monday at 2 PM UTC

jobs:
  test-aws-cli-style-formula:
    name: Test AWS CLI-Style Formula Installation
    
    # Run on manual trigger or schedule
    if: |
      github.event_name == 'workflow_dispatch' || 
      github.event_name == 'schedule'
    
    strategy:
      matrix:
        # Test on both Intel and Apple Silicon runners
        include:
          - runner: macos-latest
            arch: arm64
          - runner: macos-13  # Intel runner
            arch: x86_64
    
    runs-on: ${{ matrix.runner }}
    
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      
      - name: Get system info
        run: |
          echo "üñ•Ô∏è  System Information:"
          echo "Runner: ${{ matrix.runner }}"
          echo "Expected Architecture: ${{ matrix.arch }}"
          echo "Actual Architecture: $(uname -m)"
          echo "macOS Version: $(sw_vers -productVersion)"
          echo "Homebrew Version: $(brew --version | head -n1)"
          echo "Python Version: $(python3 --version)"
          
          # Show input parameters
          echo "üìã Workflow Inputs:"
          echo "Test Version: '${{ github.event.inputs.test_version }}'"
          echo "Trigger: Manual workflow dispatch"
      
      - name: Clean previous installations
        run: |
          echo "üßπ Cleaning up any previous installations..."
          brew uninstall mycli-app-src 2>/dev/null || echo "No previous source installation found"
          brew uninstall mycli-app-venv 2>/dev/null || echo "No previous venv installation found"
          brew untap naga-nandyala/mycli-app 2>/dev/null || echo "No previous tap found"
      
      - name: Install and test AWS CLI-style formula
        run: |
          echo "üç∫ Installing mycli-app-src (AWS CLI-style) via Homebrew tap..."
          
          echo "üìã Adding the homebrew tap..."
          brew tap naga-nandyala/mycli-app
          
          echo "üìã Verifying tap was added..."
          brew tap | grep naga-nandyala/mycli-app
          
          echo "üìã Showing available formulas in tap..."
          brew search naga-nandyala/mycli-app/
          
          echo "üç∫ Installing mycli-app-src (AWS CLI-style formula)..."
          echo "This uses AWS CLI approach: source + selective binary wheels..."
          brew install mycli-app-src --verbose
      
      - name: Verify CLI installation and commands
        run: |
          echo "‚úÖ Verifying AWS CLI-style installation..."
          
          # Check if mycli is in PATH
          if ! command -v mycli &> /dev/null; then
            echo "‚ùå mycli command not found in PATH"
            echo "üìã Current PATH:"
            echo "$PATH"
            echo "üìã Homebrew bin contents:"
            ls -la $(brew --prefix)/bin/mycli* 2>/dev/null || echo "No mycli found in Homebrew bin"
            exit 1
          fi
          
          # Test version command - should output "MyCliApp version X.X.X"
          echo "üìã Version check:"
          mycli_version=$(mycli --version)
          echo "Version output: '$mycli_version'"
          
          # Verify it contains expected format
          if [[ "$mycli_version" =~ "MyCliApp version" ]]; then
            echo "‚úÖ Version check passed - correct format"
          else
            echo "‚ùå Version check failed - expected 'MyCliApp version X.X.X', got: '$mycli_version'"
            exit 1
          fi
          
          # Test help command - should contain Usage and Commands
          echo "üìã Help command test:"
          help_output=$(mycli --help)
          echo "Help output preview:"
          echo "$help_output" | head -10
          
          if [[ "$help_output" =~ "Commands:" ]] && [[ "$help_output" =~ "Options:" ]]; then
            echo "‚úÖ Help command passed - contains expected sections"
          else
            echo "‚ùå Help command failed - missing expected sections"
            echo "Full help output:"
            echo "$help_output"
            exit 1
          fi
      
      - name: Test AWS CLI-style installation structure
        run: |
          echo "üèóÔ∏è  AWS CLI-Style Installation Structure verification:"
          binary_path=$(which mycli)
          echo "Binary location: $binary_path"
          
          # Check if it's a script wrapper (typical for Homebrew Python apps)
          if command -v file &> /dev/null; then
            file_output=$(file "$binary_path")
            echo "File type: $file_output"
          fi
          
          # Check the installation directory structure
          echo "üîç Installation directory structure:"
          install_dir=$(dirname "$binary_path")
          echo "Install directory: $install_dir"
          
          # Look for the Python environment
          cellar_path=$(brew --cellar mycli-app-src)
          echo "Cellar path: $cellar_path"
          if [[ -d "$cellar_path" ]]; then
            echo "‚úÖ Formula installed in Cellar"
            latest_version=$(ls "$cellar_path" | sort -V | tail -1)
            echo "Latest version: $latest_version"
            version_path="$cellar_path/$latest_version"
            
            echo "üìÅ Version directory contents:"
            ls -la "$version_path" | head -10
            
            # Check for Python site-packages
            if find "$version_path" -name "site-packages" -type d | head -1; then
              site_packages=$(find "$version_path" -name "site-packages" -type d | head -1)
              echo "‚úÖ Found Python site-packages: $site_packages"
              
              # Verify key packages are installed
              echo "üîç Checking for key packages:"
              key_packages=("azure_identity" "azure_core" "msal")
              for pkg in "${key_packages[@]}"; do
                if find "$site_packages" -name "*${pkg}*" -type d | head -1 >/dev/null; then
                  echo "  ‚úÖ $pkg: Found"
                else
                  echo "  ‚ùå $pkg: Not found"
                fi
              done
              
              # Check for pymsalruntime (the binary wheel)
              echo "ÔøΩ Checking for pymsalruntime (binary wheel):"
              if find "$site_packages" -name "*pymsalruntime*" -type d | head -1 >/dev/null; then
                pymsalruntime_dir=$(find "$site_packages" -name "*pymsalruntime*" -type d | head -1)
                echo "  ‚úÖ pymsalruntime found: $pymsalruntime_dir"
                
                # Check if it contains binary files (indicating binary wheel installation)
                if find "$pymsalruntime_dir" -name "*.so" -o -name "*.dylib" -o -name "*.dll" | head -1 >/dev/null; then
                  echo "  ‚úÖ Binary files detected - confirms binary wheel installation"
                else
                  echo "  ‚ö†Ô∏è  No binary files found - may be source installation"
                fi
              else
                echo "  ‚ùå pymsalruntime not found - AWS CLI-style installation may have failed"
                exit 1
              fi
            else
              echo "‚ùå No site-packages directory found"
              exit 1
            fi
          else
            echo "‚ùå Formula not found in Cellar"
            exit 1
          fi
      
      - name: Test Azure SDK and MSAL broker support
        run: |
          echo "‚òÅÔ∏è  Testing Azure SDK availability and MSAL broker support..."
          
          # Test status command to check Azure SDK availability
          echo "üìã Testing status command:"
          status_output=$(mycli status 2>&1)
          echo "Status output:"
          echo "$status_output"
          
          # Check if Azure SDK is available
          if echo "$status_output" | grep -q "Azure SDK: Available"; then
            echo "‚úÖ Azure SDK is available"
          elif echo "$status_output" | grep -q "Azure SDK: Not Available"; then
            echo "‚ùå Azure SDK is NOT available"
            echo "This indicates Azure packages were not properly installed"
            exit 1
          else
            echo "‚ö†Ô∏è  Could not determine Azure SDK status, but continuing..."
          fi
          
          # Test broker command to check MSAL broker support
          echo "üîê Testing broker command:"
          broker_output=$(mycli broker 2>&1)
          echo "Broker output:"
          echo "$broker_output"
          
          # Check for broker support indicators
          if echo "$broker_output" | grep -q "Platform Support\|Broker.*Support\|MSAL.*Available"; then
            echo "‚úÖ Broker command works - MSAL packages available"
          else
            echo "‚ùå Broker command failed or MSAL packages missing"
            echo "This indicates msal[broker] extras were not properly handled"
            exit 1
          fi
          
          # Specifically test for pymsalruntime availability
          echo "üîç Testing pymsalruntime availability:"
          if echo "$broker_output" | grep -q "pymsalruntime\|native.*broker\|Platform.*Windows\|Platform.*macOS"; then
            echo "‚úÖ pymsalruntime functionality detected"
          else
            echo "‚ö†Ô∏è  pymsalruntime functionality may not be available"
            echo "This could indicate the binary wheel installation didn't work properly"
          fi
      
      - name: Test authentication functionality
        run: |
          echo "üîê Testing authentication functionality..."
          
          # Test logout command (should work regardless of login state)
          echo "üì§ Testing logout command:"
          mycli logout
          echo "‚úÖ Logout command completed successfully"
          
          # Test login command structure (without actually logging in)
          echo "ÔøΩ Testing login command help:"
          login_help=$(mycli login --help 2>&1)
          echo "Login help output:"
          echo "$login_help"
          
          if echo "$login_help" | grep -q "Options:\|--broker\|--use-device-code"; then
            echo "‚úÖ Login command has expected authentication options"
          else
            echo "‚ö†Ô∏è  Login command may be missing some authentication options"
          fi
      
      - name: Test AWS CLI-style dependency verification
        run: |
          echo "üîç AWS CLI-Style Dependency Verification..."
          
          # Get installation info
          echo "üìä Formula installation info:"
          brew info mycli-app-src
          
          echo "üì¶ Installed dependencies:"
          brew deps mycli-app-src --installed
          
          echo "üìÅ Installed files preview:"
          brew list mycli-app-src | head -20
          
          # Check for the AWS CLI-style installation pattern
          echo "üîç Verifying AWS CLI-style pattern:"
          cellar_path=$(brew --cellar mycli-app-src)
          latest_version=$(ls "$cellar_path" | sort -V | tail -1)
          version_path="$cellar_path/$latest_version"
          
          # Look for evidence of selective installation
          if [[ -d "$version_path" ]]; then
            echo "ÔøΩ Checking installation method indicators..."
            
            # Check for pip-related files or evidence of selective installation
            if find "$version_path" -name "*.dist-info" -type d | head -5; then
              echo "‚úÖ Found .dist-info directories - indicates pip-style installation"
              
              # Count source vs binary packages
              source_packages=0
              binary_packages=0
              
              for dist_info in $(find "$version_path" -name "*.dist-info" -type d); do
                package_name=$(basename "$dist_info" | sed 's/-.*//')
                
                # Check if this looks like a binary package
                if [[ "$package_name" =~ pymsalruntime ]]; then
                  echo "  üîß Binary package detected: $package_name"
                  binary_packages=$((binary_packages + 1))
                else
                  echo "  ÔøΩ Source package: $package_name"
                  source_packages=$((source_packages + 1))
                fi
              done
              
              echo "üìä Package installation summary:"
              echo "  Source packages: $source_packages"
              echo "  Binary packages: $binary_packages"
              
              if [[ $binary_packages -gt 0 ]]; then
                echo "‚úÖ AWS CLI-style approach confirmed - binary wheels detected"
              else
                echo "‚ö†Ô∏è  No binary packages detected - may not be using AWS CLI approach"
              fi
            else
              echo "‚ö†Ô∏è  No .dist-info directories found"
            fi
          fi
      
      - name: Cleanup
        if: always()
        run: |
          echo "üßπ Final cleanup..."
          brew uninstall mycli-app-src 2>/dev/null || echo "Nothing to uninstall"
          brew untap naga-nandyala/mycli-app 2>/dev/null || echo "No tap to remove"
      
      - name: Report results
        if: always()
        run: |
          echo "üéØ AWS CLI-Style Formula Test Results Summary:"
          echo "Runner: ${{ matrix.runner }}"
          echo "Architecture: ${{ matrix.arch }}"
          echo "Status: ${{ job.status }}"
          
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "‚úÖ All AWS CLI-style formula tests passed!"
            echo "üç∫ AWS CLI-style Homebrew formula is working correctly"
            echo "‚òÅÔ∏è  Azure SDK integration confirmed"
            echo "üîß MSAL broker support with pymsalruntime verified"
            echo "üì¶ Selective binary wheel installation working"
          else
            echo "‚ùå Some AWS CLI-style formula tests failed"
            echo "üîç Check the job logs for details about:"
            echo "   - Formula installation issues"
            echo "   - Azure SDK availability problems"
            echo "   - MSAL broker support failures"
            echo "   - pymsalruntime binary wheel installation problems"
          fi

  notify-results:
    name: Notify AWS CLI-Style Test Results
    needs: test-aws-cli-style-formula
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "üéØ Overall AWS CLI-Style Formula Test Results:"
          echo "Needed jobs status: ${{ needs.test-aws-cli-style-formula.result }}"
          
          if [[ "${{ needs.test-aws-cli-style-formula.result }}" == "success" ]]; then
            echo "‚úÖ All AWS CLI-style Homebrew formula tests passed successfully!"
            echo "üç∫ AWS CLI-style tap installation working correctly on all tested platforms"
            echo "‚òÅÔ∏è  Azure SDK integration confirmed working"
            echo "üîß MSAL broker support with pymsalruntime verified working"
            echo "üì¶ Selective binary wheel installation (AWS CLI approach) confirmed"
            echo "üéâ The hybrid approach (source + binary wheels) is working perfectly!"
          else
            echo "‚ùå Some AWS CLI-style Homebrew formula tests failed"
            echo "üîç Check the job logs for details about:"
            echo "   - Formula generation or installation errors"
            echo "   - AWS CLI-style dependency handling failures"
            echo "   - Azure SDK availability issues"
            echo "   - MSAL broker support problems"
            echo "   - pymsalruntime binary wheel installation failures"
            exit 1
          fi