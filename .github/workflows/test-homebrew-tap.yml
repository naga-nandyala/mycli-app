name: Test Homebrew Tap

on:
  # Test after releases (when binaries are updated)
  release:
    types: [published]
  
  # Allow manual testing
  workflow_dispatch:
    inputs:
      test_version:
        description: 'Version to test (leave empty for latest)'
        required: false
        type: string
  
  # Test on schedule (weekly)
  schedule:
    - cron: '0 10 * * 1'  # Every Monday at 10 AM UTC

jobs:
  test-homebrew-tap:
    name: Test Homebrew Tap Installation
    
    strategy:
      matrix:
        # Test on both Intel and Apple Silicon runners
        include:
          - runner: macos-latest
            arch: arm64
          - runner: macos-13  # Intel runner
            arch: x86_64
    
    runs-on: ${{ matrix.runner }}
    
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      
      - name: Get system info
        run: |
          echo "🖥️  System Information:"
          echo "Runner: ${{ matrix.runner }}"
          echo "Expected Architecture: ${{ matrix.arch }}"
          echo "Actual Architecture: $(uname -m)"
          echo "macOS Version: $(sw_vers -productVersion)"
          echo "Homebrew Version: $(brew --version | head -n1)"
      
      - name: Clean previous installations
        run: |
          echo "🧹 Cleaning up any previous installations..."
          brew uninstall mycli-app 2>/dev/null || echo "No previous installation found"
          brew untap naga-nandyala/mycli-app 2>/dev/null || echo "No previous tap found"
      
      - name: Test Homebrew tap installation
        run: |
          echo "🍺 Installing mycli-app via dedicated Homebrew tap..."
          
          echo "📋 Adding the homebrew tap..."
          brew tap naga-nandyala/mycli-app
          
          echo "📋 Verifying tap was added..."
          brew tap | grep naga-nandyala/mycli-app
          
          echo "🍺 Installing mycli-app..."
          brew install mycli-app
      
      - name: Verify installation
        run: |
          echo "✅ Verifying installation..."
          
          # Check if mycli is in PATH
          if ! command -v mycli &> /dev/null; then
            echo "❌ mycli command not found in PATH"
            exit 1
          fi
          
          # Check version output
          echo "📋 Version check:"
          mycli_version=$(mycli --version)
          echo "Output: $mycli_version"
          
          # Verify it contains expected text
          if [[ "$mycli_version" =~ "MyCliApp version" ]]; then
            echo "✅ Version check passed"
          else
            echo "❌ Version check failed - unexpected output"
            exit 1
          fi
      
      - name: Test basic functionality
        run: |
          echo "🔧 Testing basic functionality..."
          
          # Test help command
          echo "📋 Help command test:"
          mycli --help
          
          # Test if binary architecture matches system
          echo "🏗️  Architecture verification:"
          binary_path=$(which mycli)
          echo "Binary location: $binary_path"
          
          if command -v file &> /dev/null; then
            file_output=$(file "$binary_path")
            echo "File output: $file_output"
            
            case "${{ matrix.arch }}" in
              "arm64")
                if [[ "$file_output" =~ "arm64" ]]; then
                  echo "✅ ARM64 binary verification passed"
                else
                  echo "⚠️  Architecture mismatch detected but continuing..."
                fi
                ;;
              "x86_64")
                if [[ "$file_output" =~ "x86_64" ]]; then
                  echo "✅ x86_64 binary verification passed"
                else
                  echo "⚠️  Architecture mismatch detected but continuing..."
                fi
                ;;
            esac
          fi
      
      - name: Test authentication functionality
        run: |
          echo "🔐 Testing authentication functionality..."
          
          # Test logout command
          echo "📤 Testing logout command:"
          mycli logout
          
          echo "✅ Logout command completed successfully"
      
      - name: Test login with timeout
        timeout-minutes: 1
        run: |
          echo "📥 Testing login command with --force-broker:"
          
          # Run login command in background with timeout handling
          # Start the command in background
          mycli login --force-broker &
          login_pid=$!
          
          # Wait for 30 seconds
          sleep 30
          
          # Check if process is still running
          if kill -0 $login_pid 2>/dev/null; then
            echo "⏰ Login command still running after 30 seconds (expected for interactive command)"
            echo "✅ Login command started successfully"
            # Kill the process
            kill $login_pid 2>/dev/null || true
            # Wait a moment for cleanup
            sleep 2
          else
            # Process already finished - check if it was successful
            wait $login_pid
            exit_code=$?
            if [ $exit_code -eq 0 ]; then
              echo "✅ Login command completed successfully"
            else
              echo "❌ Login command failed with exit code: $exit_code"
              exit 1
            fi
          fi
      
      - name: Test tap formula info
        run: |
          echo "📊 Tap and formula information:"
          echo "📋 Tap info:"
          brew tap-info naga-nandyala/mycli-app
          
          echo "📋 Formula info:"
          brew info mycli-app
          
          echo "📁 Installation files:"
          brew list mycli-app
      
      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Final cleanup..."
          brew uninstall mycli-app 2>/dev/null || echo "Nothing to uninstall"
          brew untap naga-nandyala/mycli-app 2>/dev/null || echo "No tap to remove"
      
      - name: Report results
        if: always()
        run: |
          echo "🎯 Test Results Summary:"
          echo "Runner: ${{ matrix.runner }}"
          echo "Architecture: ${{ matrix.arch }}"
          echo "Status: ${{ job.status }}"
          
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ All tests passed!"
          else
            echo "❌ Some tests failed"
          fi

  notify-results:
    name: Notify Test Results
    needs: test-homebrew-tap
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "🎯 Overall Test Results:"
          echo "Needed jobs status: ${{ needs.test-homebrew-tap.result }}"
          
          if [[ "${{ needs.test-homebrew-tap.result }}" == "success" ]]; then
            echo "✅ All Homebrew tap tests passed successfully!"
            echo "🍺 Tap installation is working correctly on all tested platforms"
          else
            echo "❌ Some Homebrew tap tests failed"
            echo "🔍 Check the job logs for details"
            exit 1
          fi
