name: Venv Bundling - Build macOS Bundle

# Ensure GITHUB_TOKEN can create releases
permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual triggering
    inputs:
      version:
        description: 'Version to build'
        required: true
        default: '1.0.0'
      architecture:
        description: 'Target macOS architecture'
        required: false
        default: 'both'
        type: choice
        options:
          - 'both'
          - 'x86_64'
          - 'arm64'
      create_release:
        description: 'Create GitHub Release (true/false)'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  build-macos-bundle:
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: macos-13  # Intel runner
          - arch: arm64
            runner: macos-latest  # Apple Silicon runner
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Get version from tag or input
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi
        
    - name: Skip architecture if not selected
      id: should_build
      run: |
        if [ "${{ github.event.inputs.architecture }}" = "both" ] || [ "${{ github.event.inputs.architecture }}" = "${{ matrix.arch }}" ] || [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
          echo "build=true" >> $GITHUB_OUTPUT
        else
          echo "build=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Install dependencies
      if: steps.should_build.outputs.build == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install -e .[azure,broker]
        
    - name: Create macOS bundle
      if: steps.should_build.outputs.build == 'true'
      run: |
        cd macos_homebrew/venv_bundling
        python create_macos_bundle.py --output ../../dist --arch ${{ matrix.arch }} --version ${{ steps.version.outputs.VERSION }}
        
    - name: List created files
      if: steps.should_build.outputs.build == 'true'
      run: |
        echo "Created files:"
        ls -la dist/
        
    - name: Upload bundle artifacts
      if: steps.should_build.outputs.build == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: mycli-macos-${{ matrix.arch }}-${{ steps.version.outputs.VERSION }}
        path: |
          dist/*.tar.gz
          dist/*.sha256
          dist/*.rb
          dist/*.txt
        retention-days: 30

  release:
    needs: build-macos-bundle
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi
        
    - name: Display artifacts
      run: ls -R artifacts
      
    - name: Prepare release assets
      run: |
        mkdir upload
        find artifacts -name '*.tar.gz' -exec cp {} upload/ \;
        find artifacts -name '*.sha256' -exec cp {} upload/ \;
        find artifacts -name '*.rb' -exec cp {} upload/ \;
        find artifacts -name '*.txt' -exec cp {} upload/ \;
        
    - name: Create Release Notes
      run: |
        cat > release_notes.md << 'EOF'
        # MyCLI macOS Bundle Release v${{ steps.version.outputs.VERSION }}
        
        This release contains portable macOS bundles created using virtual environments for Homebrew distribution.
        
        ## ðŸ“¦ Available Downloads
        
        - **Intel Macs (x86_64)**: `mycli-x86_64-*.tar.gz`
        - **Apple Silicon Macs (arm64)**: `mycli-arm64-*.tar.gz`
        - **SHA256 Checksums**: `*.sha256` files for verification
        - **Homebrew Formula**: `mycli.rb` template for Homebrew integration
        
        ## ðŸš€ Installation
        
        ### Direct Installation
        1. Download the appropriate `.tar.gz` file for your architecture
        2. Extract: `tar -xzf mycli-*.tar.gz`
        3. Run: `./mycli-*/bin/mycli --help`
        
        ### Homebrew Installation
        1. Use the provided `mycli.rb` formula template
        2. Update URLs and checksums in the formula
        3. Install via `brew install mycli`
        
        ## âœ¨ Features
        
        - Portable virtual environment bundles
        - Native architecture support (Intel and Apple Silicon)
        - Complete Azure authentication capabilities
        - MSAL broker support for enhanced security
        - Homebrew-ready packaging
        
        ## ðŸ”’ Security
        
        All bundles include SHA256 checksums for integrity verification.
        
        EOF
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: upload/*
        body_path: release_notes.md
        tag_name: v${{ steps.version.outputs.VERSION }}
        name: MyCLI macOS Bundle v${{ steps.version.outputs.VERSION }}
        draft: false
        prerelease: ${{ contains(steps.version.outputs.VERSION, 'alpha') || contains(steps.version.outputs.VERSION, 'beta') || contains(steps.version.outputs.VERSION, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
