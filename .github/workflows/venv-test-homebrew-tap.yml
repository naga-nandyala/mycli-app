name: Venv Bundling - Test Homebrew Tap

# This workflow tests the venv bundling-based Homebrew formula (mycli-app-venv)
# It verifies that the venv bundle installs and works correctly via Homebrew

on:
  # Test after releases (when bundles are updated)
  release:
    types: [published]
  
  # Allow manual testing
  workflow_dispatch:
    inputs:
      test_version:
        description: 'Version to test (leave empty for latest)'
        required: false
        type: string
  
  # # Test on schedule (weekly)
  # schedule:
  #   - cron: '0 11 * * 1'  # Every Monday at 11 AM UTC (1 hour after PyInstaller test)

jobs:
  test-venv-homebrew:
    name: Test Venv Bundling Homebrew Formula
    
    strategy:
      matrix:
        # Test on both Intel and Apple Silicon runners
        include:
          - runner: macos-latest
            arch: arm64
          - runner: macos-13  # Intel runner
            arch: x86_64
    
    runs-on: ${{ matrix.runner }}
    
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      
      - name: Get system info
        run: |
          echo "🖥️  System Information:"
          echo "Runner: ${{ matrix.runner }}"
          echo "Expected Architecture: ${{ matrix.arch }}"
          echo "Actual Architecture: $(uname -m)"
          echo "macOS Version: $(sw_vers -productVersion)"
          echo "Homebrew Version: $(brew --version | head -n1)"
          echo "Python Version: $(python3 --version)"
      
      - name: Clean previous installations
        run: |
          echo "🧹 Cleaning up any previous installations..."
          brew uninstall mycli-app-venv 2>/dev/null || echo "No previous venv installation found"
          brew uninstall mycli-app 2>/dev/null || echo "No previous PyInstaller installation found"
          brew untap naga-nandyala/mycli-app 2>/dev/null || echo "No previous tap found"
      
      - name: Test venv Homebrew tap installation
        run: |
          echo "🍺 Installing mycli-app-venv (venv bundle) via dedicated Homebrew tap..."
          
          echo "📋 Adding the homebrew tap..."
          brew tap naga-nandyala/mycli-app
          
          echo "📋 Verifying tap was added..."
          brew tap | grep naga-nandyala/mycli-app
          
          echo "🍺 Installing mycli-app-venv (venv bundling formula)..."
          brew install mycli-app-venv
      
      - name: Verify installation
        run: |
          echo "✅ Verifying venv bundle installation..."
          
          # Check if mycli is in PATH
          if ! command -v mycli &> /dev/null; then
            echo "❌ mycli command not found in PATH"
            exit 1
          fi
          
          # Check version output
          echo "📋 Version check:"
          mycli_version=$(mycli --version)
          echo "Output: $mycli_version"
          
          # Verify it contains expected text
          if [[ "$mycli_version" =~ "MyCliApp version" ]]; then
            echo "✅ Version check passed"
          else
            echo "❌ Version check failed - unexpected output"
            exit 1
          fi
      
      - name: Test basic functionality
        run: |
          echo "🔧 Testing basic functionality..."
          
          # Test help command
          echo "📋 Help command test:"
          mycli --help
          
          # Test if venv bundle structure is correct
          echo "🏗️  Venv Bundle Structure verification:"
          binary_path=$(which mycli)
          echo "Binary location: $binary_path"
          
          # Check if it's a script (venv bundle should be a shell script wrapper)
          if command -v file &> /dev/null; then
            file_output=$(file "$binary_path")
            echo "File output: $file_output"
            
            if [[ "$file_output" =~ "shell script" ]] || [[ "$file_output" =~ "text" ]]; then
              echo "✅ Venv bundle wrapper script detected"
            else
              echo "⚠️  Expected shell script wrapper, but got different file type"
            fi
          fi
          
          # Check if the underlying Python environment exists
          echo "🐍 Python environment verification:"
          # Try to find the actual venv location
          if [[ -f "$binary_path" ]]; then
            echo "📋 Wrapper script content preview:"
            head -10 "$binary_path"
          fi
      
      - name: Test authentication functionality
        run: |
          echo "🔐 Testing authentication functionality..."
          
          # Test logout command
          echo "📤 Testing logout command:"
          mycli logout
          
          echo "✅ Logout command completed successfully"
      
      - name: Test login with timeout
        timeout-minutes: 1
        run: |
          echo "📥 Testing login command with --force-broker:"
          
          # Run login command and capture output and exit code
          # In CI environment, we expect this to fail gracefully
          login_output=$(mycli login --force-broker 2>&1) || login_exit_code=$?
          echo "Login output: $login_output"
          echo "Login exit code: ${login_exit_code:-0}"
          
          # Check if the command attempted broker authentication
          if echo "$login_output" | grep -q "Broker-based authentication"; then
            echo "✅ Broker authentication method was attempted"
            
            # Check if it failed due to CI environment (expected)
            if echo "$login_output" | grep -q "Force broker specified but only browser authentication is available\|Authorization type is not supported\|No accounts were found in the cache"; then
              echo "✅ Expected broker authentication failure in CI environment"
              echo "✅ This confirms broker detection is working correctly"
            elif echo "$login_output" | grep -q "Successfully authenticated"; then
              echo "✅ Broker authentication succeeded (unexpected but good!)"
            else
              echo "⚠️  Unexpected broker authentication result, but continuing..."
            fi
          else
            echo "❌ Broker authentication method was not attempted"
            echo "This indicates a potential issue with Azure SDK integration"
            exit 1
          fi
          
          echo "✅ Force-broker login test completed successfully"
      
      - name: Test Azure SDK availability  
        run: |
          echo "� Testing Azure SDK availability via status command:"
          
          # Check Azure SDK availability directly
          status_output=$(mycli status 2>&1)
          echo "Status output: $status_output"
          
          # Determine if Azure SDK is properly available
          if echo "$status_output" | grep -q "Azure SDK: Available"; then
            echo "✅ Azure SDK is available in the bundle"
          elif echo "$status_output" | grep -q "Azure SDK: Not Available"; then
            echo "❌ Azure SDK is NOT available in the bundle"
            echo "This indicates that Azure packages were not properly included during bundling"
            exit 1
          else
            echo "⚠️ Could not determine Azure SDK status from output"
            echo "Full status output: $status_output"
            exit 1
          fi
      
      - name: Test venv bundle dependencies
        run: |
          echo "📦 Testing venv bundle dependencies..."
          
          # Check if Python dependencies are available
          echo "🐍 Python dependency verification:"
          
          # Test if we can import key modules (this tests the venv bundle integrity)
          mycli --version > /dev/null && echo "✅ Core application modules working"
          
          # Test if we can check broker capabilities (this requires Azure packages)
          echo "🔐 Testing broker command availability:"
          broker_output=$(mycli broker 2>&1)
          if echo "$broker_output" | grep -q "Platform Support"; then
            echo "✅ Broker command works (Azure packages available)"
          else
            echo "❌ Broker command failed - Azure packages may be missing"
            echo "Broker output: $broker_output"
            exit 1
          fi
          
          echo "📊 Bundle size information:"
          if [[ -f "$(which mycli)" ]]; then
            bundle_dir=$(dirname "$(readlink -f "$(which mycli)" 2>/dev/null || which mycli)")
            if [[ -d "$bundle_dir" ]]; then
              echo "Bundle directory: $bundle_dir"
              du -sh "$bundle_dir" 2>/dev/null || echo "Could not determine bundle size"
            fi
          fi
      
      - name: Test tap formula info
        run: |
          echo "📊 Venv tap and formula information:"
          echo "📋 Tap info:"
          brew tap-info naga-nandyala/mycli-app
          
          echo "📋 Venv formula info:"
          brew info --formula mycli-app-venv
          
          echo "📁 Venv installation files:"
          brew list mycli-app-venv
      
      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Final cleanup..."
          brew uninstall mycli-app-venv 2>/dev/null || echo "Nothing to uninstall"
          brew untap naga-nandyala/mycli-app 2>/dev/null || echo "No tap to remove"
      
      - name: Report results
        if: always()
        run: |
          echo "🎯 Venv Test Results Summary:"
          echo "Runner: ${{ matrix.runner }}"
          echo "Architecture: ${{ matrix.arch }}"
          echo "Status: ${{ job.status }}"
          
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ All venv bundle tests passed!"
          else
            echo "❌ Some venv bundle tests failed"
          fi

  notify-results:
    name: Notify Venv Test Results
    needs: test-venv-homebrew
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "🎯 Overall Venv Bundling Test Results:"
          echo "Needed jobs status: ${{ needs.test-venv-homebrew.result }}"
          
          if [[ "${{ needs.test-venv-homebrew.result }}" == "success" ]]; then
            echo "✅ All venv bundling Homebrew tap tests passed successfully!"
            echo "🍺 Venv bundling tap installation is working correctly on all tested platforms"
          else
            echo "❌ Some venv bundling Homebrew tap tests failed"
            echo "🔍 Check the job logs for details"
            exit 1
          fi
